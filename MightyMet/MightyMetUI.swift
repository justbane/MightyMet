//
//  MightyMetUI.swift
//  MightyMetUI
//
//  Created by Justin Bane on 3/17/17.
//  Copyright Â© 2017 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class MightyMetUI : NSObject {

    //// Cache

    private struct Cache {
        static let red: UIColor = UIColor(red: 0.676, green: 0.073, blue: 0.073, alpha: 1.000)
        static let yellow: UIColor = UIColor(red: 0.987, green: 1.000, blue: 0.000, alpha: 1.000)
        static let fuscia: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.413, alpha: 1.000)
        static let transparent: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.458)
        static let lime: UIColor = UIColor(red: 0.000, green: 1.000, blue: 0.108, alpha: 1.000)
        static let electricBlue: UIColor = UIColor(red: 0.000, green: 0.974, blue: 1.000, alpha: 1.000)
        static let blue: UIColor = UIColor(red: 0.000, green: 0.070, blue: 1.000, alpha: 1.000)
        static let darkBlue: UIColor = MightyMetUI.blue.withBrightness(0.3)
        static let darkRed: UIColor = MightyMetUI.red.withBrightness(0.3)
        static let yellowOrange: UIColor = MightyMetUI.yellow.withHue(0.1)
        static let darkFuscia: UIColor = MightyMetUI.fuscia.withBrightness(0.4)
        static let darkRedWhiteColor: UIColor = UIColor(red: 0.972, green: 0.000, blue: 0.000, alpha: 1.000)
        static let darkRedWhiteOnColor: UIColor = UIColor(red: 0.882, green: 0.000, blue: 0.000, alpha: 1.000)
        static let redYellow: CGGradient = CGGradient(colorsSpace: nil, colors: [MightyMetUI.red.cgColor, MightyMetUI.yellow.cgColor] as CFArray, locations: [0.26, 1])!
    }

    //// Colors

    public dynamic class var red: UIColor { return Cache.red }
    public dynamic class var yellow: UIColor { return Cache.yellow }
    public dynamic class var fuscia: UIColor { return Cache.fuscia }
    public dynamic class var transparent: UIColor { return Cache.transparent }
    public dynamic class var lime: UIColor { return Cache.lime }
    public dynamic class var electricBlue: UIColor { return Cache.electricBlue }
    public dynamic class var blue: UIColor { return Cache.blue }
    public dynamic class var darkBlue: UIColor { return Cache.darkBlue }
    public dynamic class var darkRed: UIColor { return Cache.darkRed }
    public dynamic class var yellowOrange: UIColor { return Cache.yellowOrange }
    public dynamic class var darkFuscia: UIColor { return Cache.darkFuscia }
    public dynamic class var darkRedWhiteColor: UIColor { return Cache.darkRedWhiteColor }
    public dynamic class var darkRedWhiteOnColor: UIColor { return Cache.darkRedWhiteOnColor }

    //// Gradients

    public dynamic class var redYellow: CGGradient { return Cache.redYellow }

    //// Drawing Methods

    public dynamic class func drawMultiSelector(frame: CGRect = CGRect(x: 0, y: 0, width: 345, height: 345), bPMAngle: CGFloat = 0, pitchAngle: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group
        //// Track
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 173.5, y: frame.minY + 55.3))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 116, y: frame.minY + 70.65), controlPoint1: CGPoint(x: frame.minX + 152.56, y: frame.minY + 55.3), controlPoint2: CGPoint(x: frame.minX + 132.92, y: frame.minY + 60.89))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 58.3, y: frame.minY + 170.5), controlPoint1: CGPoint(x: frame.minX + 81.51, y: frame.minY + 90.56), controlPoint2: CGPoint(x: frame.minX + 58.3, y: frame.minY + 127.82))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 173.5, y: frame.minY + 285.7), controlPoint1: CGPoint(x: frame.minX + 58.3, y: frame.minY + 234.12), controlPoint2: CGPoint(x: frame.minX + 109.88, y: frame.minY + 285.7))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 288.7, y: frame.minY + 170.5), controlPoint1: CGPoint(x: frame.minX + 237.12, y: frame.minY + 285.7), controlPoint2: CGPoint(x: frame.minX + 288.7, y: frame.minY + 234.12))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 173.5, y: frame.minY + 55.3), controlPoint1: CGPoint(x: frame.minX + 288.7, y: frame.minY + 106.88), controlPoint2: CGPoint(x: frame.minX + 237.12, y: frame.minY + 55.3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 333.5, y: frame.minY + 170.5))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 173.5, y: frame.minY + 330.5), controlPoint1: CGPoint(x: frame.minX + 333.5, y: frame.minY + 258.87), controlPoint2: CGPoint(x: frame.minX + 261.87, y: frame.minY + 330.5))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 13.5, y: frame.minY + 170.5), controlPoint1: CGPoint(x: frame.minX + 85.13, y: frame.minY + 330.5), controlPoint2: CGPoint(x: frame.minX + 13.5, y: frame.minY + 258.87))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 77.16, y: frame.minY + 42.74), controlPoint1: CGPoint(x: frame.minX + 13.5, y: frame.minY + 118.31), controlPoint2: CGPoint(x: frame.minX + 38.49, y: frame.minY + 71.95))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 173.5, y: frame.minY + 10.5), controlPoint1: CGPoint(x: frame.minX + 103.96, y: frame.minY + 22.5), controlPoint2: CGPoint(x: frame.minX + 137.33, y: frame.minY + 10.5))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 333.5, y: frame.minY + 170.5), controlPoint1: CGPoint(x: frame.minX + 261.87, y: frame.minY + 10.5), controlPoint2: CGPoint(x: frame.minX + 333.5, y: frame.minY + 82.13))
        bezierPath.close()
        context.saveGState()
        bezierPath.addClip()
        let bezierBounds = bezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(MightyMetUI.redYellow,
            start: CGPoint(x: bezierBounds.midX, y: bezierBounds.minY),
            end: CGPoint(x: bezierBounds.midX, y: bezierBounds.maxY),
            options: [])
        context.restoreGState()




        //// PitchHandle Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 173.49, y: frame.minY + 170.13)
        context.rotate(by: -pitchAngle * CGFloat.pi/180)

        let pitchHandlePath = UIBezierPath(ovalIn: CGRect(x: -22.17, y: -158.4, width: 44.54, height: 42.62))
        MightyMetUI.transparent.setFill()
        pitchHandlePath.fill()
        MightyMetUI.lime.setStroke()
        pitchHandlePath.lineWidth = 3.5
        pitchHandlePath.stroke()

        context.restoreGState()


        //// BPMHandle Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 173.5, y: frame.minY + 170.86)
        context.rotate(by: -bPMAngle * CGFloat.pi/180)

        let bPMHandlePath = UIBezierPath(ovalIn: CGRect(x: -19.72, y: 115.27, width: 44.8, height: 44.79))
        MightyMetUI.transparent.setFill()
        bPMHandlePath.fill()
        MightyMetUI.electricBlue.setStroke()
        bPMHandlePath.lineWidth = 3.5
        bPMHandlePath.stroke()

        context.restoreGState()
    }

    public dynamic class func drawBPMSelector(frame: CGRect = CGRect(x: 0, y: 0, width: 310, height: 310), bPMAngle: CGFloat = 0, bPMText: String = "160") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.darkGray.withAlphaComponent(0.8)
        shadow.shadowOffset = CGSize(width: 2, height: 2)
        shadow.shadowBlurRadius = 3


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + 11, y: frame.minY + frame.height - 299, width: 288, height: 288)


        //// Group
        //// Track
        context.saveGState()
        context.translateBy(x: group.minX + 144, y: group.minY + 144)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 20, y: -124))
        bezier2Path.addCurve(to: CGPoint(x: 19.13, y: -118.15), controlPoint1: CGPoint(x: 20, y: -121.96), controlPoint2: CGPoint(x: 19.7, y: -120))
        bezier2Path.addCurve(to: CGPoint(x: 0.37, y: -104), controlPoint1: CGPoint(x: 16.66, y: -110.07), controlPoint2: CGPoint(x: 9.22, y: -104.17))
        bezier2Path.addLine(to: CGPoint(x: 0, y: -104))
        bezier2Path.addLine(to: CGPoint(x: 0, y: -103.68))
        bezier2Path.addCurve(to: CGPoint(x: -51.75, y: -89.86), controlPoint1: CGPoint(x: -18.85, y: -103.68), controlPoint2: CGPoint(x: -36.52, y: -98.65))
        bezier2Path.addCurve(to: CGPoint(x: -103.68, y: -0), controlPoint1: CGPoint(x: -82.79, y: -71.95), controlPoint2: CGPoint(x: -103.68, y: -38.41))
        bezier2Path.addCurve(to: CGPoint(x: -0, y: 103.68), controlPoint1: CGPoint(x: -103.68, y: 57.26), controlPoint2: CGPoint(x: -57.26, y: 103.68))
        bezier2Path.addCurve(to: CGPoint(x: 103.68, y: 0), controlPoint1: CGPoint(x: 57.26, y: 103.68), controlPoint2: CGPoint(x: 103.68, y: 57.26))
        bezier2Path.addCurve(to: CGPoint(x: 104, y: 0), controlPoint1: CGPoint(x: 103.68, y: 0), controlPoint2: CGPoint(x: 103.79, y: 0))
        bezier2Path.addCurve(to: CGPoint(x: 124, y: -20), controlPoint1: CGPoint(x: 104, y: -11.05), controlPoint2: CGPoint(x: 112.95, y: -20))
        bezier2Path.addCurve(to: CGPoint(x: 144, y: 0), controlPoint1: CGPoint(x: 135.05, y: -20), controlPoint2: CGPoint(x: 144, y: -11.05))
        bezier2Path.addCurve(to: CGPoint(x: -0, y: 144), controlPoint1: CGPoint(x: 144, y: 79.53), controlPoint2: CGPoint(x: 79.53, y: 144))
        bezier2Path.addCurve(to: CGPoint(x: -144, y: -0), controlPoint1: CGPoint(x: -79.53, y: 144), controlPoint2: CGPoint(x: -144, y: 79.53))
        bezier2Path.addCurve(to: CGPoint(x: -86.7, y: -114.98), controlPoint1: CGPoint(x: -144, y: -46.97), controlPoint2: CGPoint(x: -121.51, y: -88.7))
        bezier2Path.addCurve(to: CGPoint(x: 0, y: -144), controlPoint1: CGPoint(x: -62.59, y: -133.2), controlPoint2: CGPoint(x: -32.55, y: -144))
        bezier2Path.addCurve(to: CGPoint(x: 20, y: -124), controlPoint1: CGPoint(x: 11.05, y: -144), controlPoint2: CGPoint(x: 20, y: -135.05))
        bezier2Path.close()
        context.saveGState()
        bezier2Path.addClip()
        context.drawLinearGradient(MightyMetUI.redYellow, start: CGPoint(x: -114.66, y: -88.98), end: CGPoint(x: 88.98, y: 114.66), options: [])
        context.restoreGState()
        MightyMetUI.darkRed.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()



        context.restoreGState()


        //// Handle
        context.saveGState()
        context.translateBy(x: group.minX + 144, y: group.minY + 144)

        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// BPMHandle Drawing
        context.saveGState()
        context.rotate(by: -(bPMAngle + 90) * CGFloat.pi/180)

        let bPMHandlePath = UIBezierPath(ovalIn: CGRect(x: -19.84, y: 105.64, width: 38.72, height: 38.17))
        MightyMetUI.transparent.setFill()
        bPMHandlePath.fill()
        UIColor.white.setStroke()
        bPMHandlePath.lineWidth = 3.5
        bPMHandlePath.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// TextLabel
        //// BPM Drawing
        let bPMRect = CGRect(x: group.minX + 53, y: group.minY + 113, width: 110, height: 61)
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        let bPMStyle = NSMutableParagraphStyle()
        bPMStyle.alignment = .right
        let bPMFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Roman", size: 60)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: bPMStyle]

        let bPMTextHeight: CGFloat = bPMText.boundingRect(with: CGSize(width: bPMRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: bPMFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: bPMRect)
        bPMText.draw(in: CGRect(x: bPMRect.minX, y: bPMRect.minY + (bPMRect.height - bPMTextHeight) / 2, width: bPMRect.width, height: bPMTextHeight), withAttributes: bPMFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// BPM Label Drawing
        let bPMLabelRect = CGRect(x: group.minX + 168, y: group.minY + 119, width: 43, height: 21)
        let bPMLabelTextContent = "BPM"
        let bPMLabelStyle = NSMutableParagraphStyle()
        bPMLabelStyle.alignment = .left
        let bPMLabelFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Light", size: UIFont.labelFontSize)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: bPMLabelStyle]

        let bPMLabelTextHeight: CGFloat = bPMLabelTextContent.boundingRect(with: CGSize(width: bPMLabelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: bPMLabelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: bPMLabelRect)
        bPMLabelTextContent.draw(in: CGRect(x: bPMLabelRect.minX, y: bPMLabelRect.minY + (bPMLabelRect.height - bPMLabelTextHeight) / 2, width: bPMLabelRect.width, height: bPMLabelTextHeight), withAttributes: bPMLabelFontAttributes)
        context.restoreGState()
    }

    public dynamic class func drawHertzSelector(frame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), pitchAngle: CGFloat = 0, hertzText: String = "Name") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let purple = UIColor(red: 0.462, green: 0.000, blue: 1.000, alpha: 1.000)

        //// Gradient Declarations
        let bluePink = CGGradient(colorsSpace: nil, colors: [purple.cgColor, MightyMetUI.fuscia.cgColor] as CFArray, locations: [0, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.darkGray.withAlphaComponent(0.8)
        shadow.shadowOffset = CGSize(width: 2, height: 2)
        shadow.shadowBlurRadius = 3

        //// Track
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 188.99, y: frame.minY + 98.5))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 160.99, y: frame.minY + 98.5))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 101, y: frame.minY + 39), controlPoint1: CGPoint(x: frame.minX + 160.46, y: frame.minY + 65.71), controlPoint2: CGPoint(x: frame.minX + 133.85, y: frame.minY + 39.27))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 101, y: frame.minY + 11.01), controlPoint1: CGPoint(x: frame.minX + 101, y: frame.minY + 25.98), controlPoint2: CGPoint(x: frame.minX + 101, y: frame.minY + 11.34))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 188.99, y: frame.minY + 98.5), controlPoint1: CGPoint(x: frame.minX + 149.19, y: frame.minY + 11.54), controlPoint2: CGPoint(x: frame.minX + 188.19, y: frame.minY + 50.37))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 100, y: frame.minY + 11))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 100, y: frame.minY + 39), controlPoint1: CGPoint(x: frame.minX + 100, y: frame.minY + 11), controlPoint2: CGPoint(x: frame.minX + 100, y: frame.minY + 25.83))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 73.41, y: frame.minY + 45.39), controlPoint1: CGPoint(x: frame.minX + 90.45, y: frame.minY + 39.08), controlPoint2: CGPoint(x: frame.minX + 81.42, y: frame.minY + 41.37))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 71.72, y: frame.minY + 46.27), controlPoint1: CGPoint(x: frame.minX + 72.84, y: frame.minY + 45.67), controlPoint2: CGPoint(x: frame.minX + 72.28, y: frame.minY + 45.97))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 40, y: frame.minY + 99.5), controlPoint1: CGPoint(x: frame.minX + 52.83, y: frame.minY + 56.5), controlPoint2: CGPoint(x: frame.minX + 40, y: frame.minY + 76.5))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 11.5, y: frame.minY + 99.5))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 11.5, y: frame.minY + 100.5))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 40.01, y: frame.minY + 100.5))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 100.5, y: frame.minY + 160), controlPoint1: CGPoint(x: frame.minX + 40.54, y: frame.minY + 133.45), controlPoint2: CGPoint(x: frame.minX + 67.42, y: frame.minY + 160))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 101.5, y: frame.minY + 159.99), controlPoint1: CGPoint(x: frame.minX + 100.83, y: frame.minY + 160), controlPoint2: CGPoint(x: frame.minX + 101.17, y: frame.minY + 160))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 101.5, y: frame.minY + 188.5), controlPoint1: CGPoint(x: frame.minX + 101.5, y: frame.minY + 173.98), controlPoint2: CGPoint(x: frame.minX + 101.5, y: frame.minY + 188.5))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 102.5, y: frame.minY + 188.5))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 102.5, y: frame.minY + 159.97), controlPoint1: CGPoint(x: frame.minX + 102.5, y: frame.minY + 188.5), controlPoint2: CGPoint(x: frame.minX + 102.5, y: frame.minY + 173.96))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 161, y: frame.minY + 99.5), controlPoint1: CGPoint(x: frame.minX + 134.99, y: frame.minY + 158.91), controlPoint2: CGPoint(x: frame.minX + 161, y: frame.minY + 132.24))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 189, y: frame.minY + 99.5))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 189, y: frame.minY + 100))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 100, y: frame.minY + 189), controlPoint1: CGPoint(x: frame.minX + 189, y: frame.minY + 149.15), controlPoint2: CGPoint(x: frame.minX + 149.15, y: frame.minY + 189))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 11, y: frame.minY + 100), controlPoint1: CGPoint(x: frame.minX + 50.85, y: frame.minY + 189), controlPoint2: CGPoint(x: frame.minX + 11, y: frame.minY + 149.15))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 44.47, y: frame.minY + 30.44), controlPoint1: CGPoint(x: frame.minX + 11, y: frame.minY + 71.85), controlPoint2: CGPoint(x: frame.minX + 24.07, y: frame.minY + 46.75))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 50, y: frame.minY + 26.36), controlPoint1: CGPoint(x: frame.minX + 46.26, y: frame.minY + 29.01), controlPoint2: CGPoint(x: frame.minX + 48.1, y: frame.minY + 27.65))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 53.14, y: frame.minY + 24.32), controlPoint1: CGPoint(x: frame.minX + 51.03, y: frame.minY + 25.66), controlPoint2: CGPoint(x: frame.minX + 52.08, y: frame.minY + 24.98))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 98.47, y: frame.minY + 11.01), controlPoint1: CGPoint(x: frame.minX + 66.35, y: frame.minY + 16.13), controlPoint2: CGPoint(x: frame.minX + 81.85, y: frame.minY + 11.29))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 100, y: frame.minY + 11), controlPoint1: CGPoint(x: frame.minX + 99.03, y: frame.minY + 11), controlPoint2: CGPoint(x: frame.minX + 99.51, y: frame.minY + 11))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 100, y: frame.minY + 11))
        bezierPath.close()
        context.saveGState()
        bezierPath.addClip()
        let bezierBounds = bezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(bluePink,
            start: CGPoint(x: bezierBounds.midX, y: bezierBounds.maxY),
            end: CGPoint(x: bezierBounds.midX, y: bezierBounds.minY),
            options: [])
        context.restoreGState()
        MightyMetUI.darkRed.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()




        //// Handle
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// BPMHandle Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 100, y: frame.minY + 100)
        context.rotate(by: -(pitchAngle + 90) * CGFloat.pi/180)

        let bPMHandlePath = UIBezierPath(ovalIn: CGRect(x: -13.84, y: 61, width: 27.84, height: 27.82))
        MightyMetUI.transparent.setFill()
        bPMHandlePath.fill()
        UIColor.white.setStroke()
        bPMHandlePath.lineWidth = 3.5
        bPMHandlePath.stroke()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Labels
        //// Hertz Value Drawing
        let hertzValueRect = CGRect(x: frame.minX + 40, y: frame.minY + 65, width: 120, height: 49)
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        let hertzValueStyle = NSMutableParagraphStyle()
        hertzValueStyle.alignment = .center
        let hertzValueFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Roman", size: 28)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: hertzValueStyle]

        let hertzValueTextHeight: CGFloat = hertzText.boundingRect(with: CGSize(width: hertzValueRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: hertzValueFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: hertzValueRect)
        hertzText.draw(in: CGRect(x: hertzValueRect.minX, y: hertzValueRect.minY + (hertzValueRect.height - hertzValueTextHeight) / 2, width: hertzValueRect.width, height: hertzValueTextHeight), withAttributes: hertzValueFontAttributes)
        context.restoreGState()
        context.restoreGState()



        //// Herts Label Drawing
        let hertsLabelRect = CGRect(x: frame.minX + 72, y: frame.minY + 114, width: 56, height: 21)
        let hertsLabelTextContent = "sound"
        let hertsLabelStyle = NSMutableParagraphStyle()
        hertsLabelStyle.alignment = .center
        let hertsLabelFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Light", size: 20)!, NSForegroundColorAttributeName: UIColor.white, NSParagraphStyleAttributeName: hertsLabelStyle]

        let hertsLabelTextHeight: CGFloat = hertsLabelTextContent.boundingRect(with: CGSize(width: hertsLabelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: hertsLabelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: hertsLabelRect)
        hertsLabelTextContent.draw(in: CGRect(x: hertsLabelRect.minX, y: hertsLabelRect.minY + (hertsLabelRect.height - hertsLabelTextHeight) / 2, width: hertsLabelRect.width, height: hertsLabelTextHeight), withAttributes: hertsLabelFontAttributes)
        context.restoreGState()
    }

    public dynamic class func drawPlayButton(frame: CGRect = CGRect(x: 7, y: 7, width: 86, height: 86), isRunning: Bool = false, isNotRunning: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.darkGray.withAlphaComponent(0.8)
        shadow.shadowOffset = CGSize(width: 2, height: 2)
        shadow.shadowBlurRadius = 3


        //// Subframes
        let playGroup: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 69) * 0.52941 + 0.5), y: frame.minY + fastFloor((frame.height - 69) * 0.47059 + 0.5), width: 69, height: 69)


        //// Play Group
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: playGroup.minX + 34.5, y: playGroup.minY + 6))
        bezierPath.addCurve(to: CGPoint(x: playGroup.minX + 18.96, y: playGroup.minY + 10.61), controlPoint1: CGPoint(x: playGroup.minX + 28.77, y: playGroup.minY + 6), controlPoint2: CGPoint(x: playGroup.minX + 23.43, y: playGroup.minY + 7.69))
        bezierPath.addCurve(to: CGPoint(x: playGroup.minX + 6, y: playGroup.minY + 34.5), controlPoint1: CGPoint(x: playGroup.minX + 11.16, y: playGroup.minY + 15.69), controlPoint2: CGPoint(x: playGroup.minX + 6, y: playGroup.minY + 24.49))
        bezierPath.addCurve(to: CGPoint(x: playGroup.minX + 34.5, y: playGroup.minY + 63), controlPoint1: CGPoint(x: playGroup.minX + 6, y: playGroup.minY + 50.24), controlPoint2: CGPoint(x: playGroup.minX + 18.76, y: playGroup.minY + 63))
        bezierPath.addCurve(to: CGPoint(x: playGroup.minX + 63, y: playGroup.minY + 34.5), controlPoint1: CGPoint(x: playGroup.minX + 50.24, y: playGroup.minY + 63), controlPoint2: CGPoint(x: playGroup.minX + 63, y: playGroup.minY + 50.24))
        bezierPath.addCurve(to: CGPoint(x: playGroup.minX + 34.5, y: playGroup.minY + 6), controlPoint1: CGPoint(x: playGroup.minX + 63, y: playGroup.minY + 18.76), controlPoint2: CGPoint(x: playGroup.minX + 50.24, y: playGroup.minY + 6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: playGroup.minX + 69, y: playGroup.minY + 34.5))
        bezierPath.addCurve(to: CGPoint(x: playGroup.minX + 34.5, y: playGroup.minY + 69), controlPoint1: CGPoint(x: playGroup.minX + 69, y: playGroup.minY + 53.55), controlPoint2: CGPoint(x: playGroup.minX + 53.55, y: playGroup.minY + 69))
        bezierPath.addCurve(to: CGPoint(x: playGroup.minX, y: playGroup.minY + 34.5), controlPoint1: CGPoint(x: playGroup.minX + 15.45, y: playGroup.minY + 69), controlPoint2: CGPoint(x: playGroup.minX, y: playGroup.minY + 53.55))
        bezierPath.addCurve(to: CGPoint(x: playGroup.minX + 13.66, y: playGroup.minY + 7.01), controlPoint1: CGPoint(x: playGroup.minX, y: playGroup.minY + 23.28), controlPoint2: CGPoint(x: playGroup.minX + 5.36, y: playGroup.minY + 13.31))
        bezierPath.addCurve(to: CGPoint(x: playGroup.minX + 34.5, y: playGroup.minY), controlPoint1: CGPoint(x: playGroup.minX + 19.45, y: playGroup.minY + 2.61), controlPoint2: CGPoint(x: playGroup.minX + 26.67, y: playGroup.minY))
        bezierPath.addCurve(to: CGPoint(x: playGroup.minX + 69, y: playGroup.minY + 34.5), controlPoint1: CGPoint(x: playGroup.minX + 53.55, y: playGroup.minY), controlPoint2: CGPoint(x: playGroup.minX + 69, y: playGroup.minY + 15.45))
        bezierPath.close()
        MightyMetUI.transparent.setFill()
        bezierPath.fill()


        if (isNotRunning) {
            //// Play Drawing
            let playPath = UIBezierPath()
            playPath.move(to: CGPoint(x: playGroup.minX + 25, y: playGroup.minY + 15))
            playPath.addLine(to: CGPoint(x: playGroup.minX + 53, y: playGroup.minY + 33))
            playPath.addLine(to: CGPoint(x: playGroup.minX + 25, y: playGroup.minY + 54))
            playPath.addLine(to: CGPoint(x: playGroup.minX + 25, y: playGroup.minY + 15))
            playPath.close()
            MightyMetUI.transparent.setFill()
            playPath.fill()
        }


        if (isRunning) {
            //// Pause
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: playGroup.minX + 23, y: playGroup.minY + 19, width: 8, height: 31))
            MightyMetUI.yellowOrange.setFill()
            rectanglePath.fill()


            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(rect: CGRect(x: playGroup.minX + 37, y: playGroup.minY + 19, width: 8, height: 31))
            MightyMetUI.yellowOrange.setFill()
            rectangle2Path.fill()




            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: playGroup.minX + 34.5, y: playGroup.minY + 6))
            bezier2Path.addCurve(to: CGPoint(x: playGroup.minX + 18.96, y: playGroup.minY + 10.61), controlPoint1: CGPoint(x: playGroup.minX + 28.77, y: playGroup.minY + 6), controlPoint2: CGPoint(x: playGroup.minX + 23.43, y: playGroup.minY + 7.69))
            bezier2Path.addCurve(to: CGPoint(x: playGroup.minX + 6, y: playGroup.minY + 34.5), controlPoint1: CGPoint(x: playGroup.minX + 11.16, y: playGroup.minY + 15.69), controlPoint2: CGPoint(x: playGroup.minX + 6, y: playGroup.minY + 24.49))
            bezier2Path.addCurve(to: CGPoint(x: playGroup.minX + 34.5, y: playGroup.minY + 63), controlPoint1: CGPoint(x: playGroup.minX + 6, y: playGroup.minY + 50.24), controlPoint2: CGPoint(x: playGroup.minX + 18.76, y: playGroup.minY + 63))
            bezier2Path.addCurve(to: CGPoint(x: playGroup.minX + 63, y: playGroup.minY + 34.5), controlPoint1: CGPoint(x: playGroup.minX + 50.24, y: playGroup.minY + 63), controlPoint2: CGPoint(x: playGroup.minX + 63, y: playGroup.minY + 50.24))
            bezier2Path.addCurve(to: CGPoint(x: playGroup.minX + 34.5, y: playGroup.minY + 6), controlPoint1: CGPoint(x: playGroup.minX + 63, y: playGroup.minY + 18.76), controlPoint2: CGPoint(x: playGroup.minX + 50.24, y: playGroup.minY + 6))
            bezier2Path.close()
            bezier2Path.move(to: CGPoint(x: playGroup.minX + 69, y: playGroup.minY + 34.5))
            bezier2Path.addCurve(to: CGPoint(x: playGroup.minX + 34.5, y: playGroup.minY + 69), controlPoint1: CGPoint(x: playGroup.minX + 69, y: playGroup.minY + 53.55), controlPoint2: CGPoint(x: playGroup.minX + 53.55, y: playGroup.minY + 69))
            bezier2Path.addCurve(to: CGPoint(x: playGroup.minX, y: playGroup.minY + 34.5), controlPoint1: CGPoint(x: playGroup.minX + 15.45, y: playGroup.minY + 69), controlPoint2: CGPoint(x: playGroup.minX, y: playGroup.minY + 53.55))
            bezier2Path.addCurve(to: CGPoint(x: playGroup.minX + 13.66, y: playGroup.minY + 7.01), controlPoint1: CGPoint(x: playGroup.minX, y: playGroup.minY + 23.28), controlPoint2: CGPoint(x: playGroup.minX + 5.36, y: playGroup.minY + 13.31))
            bezier2Path.addCurve(to: CGPoint(x: playGroup.minX + 34.5, y: playGroup.minY), controlPoint1: CGPoint(x: playGroup.minX + 19.45, y: playGroup.minY + 2.61), controlPoint2: CGPoint(x: playGroup.minX + 26.67, y: playGroup.minY))
            bezier2Path.addCurve(to: CGPoint(x: playGroup.minX + 69, y: playGroup.minY + 34.5), controlPoint1: CGPoint(x: playGroup.minX + 53.55, y: playGroup.minY), controlPoint2: CGPoint(x: playGroup.minX + 69, y: playGroup.minY + 15.45))
            bezier2Path.close()
            MightyMetUI.yellowOrange.setFill()
            bezier2Path.fill()
        }


        context.endTransparencyLayer()
        context.restoreGState()
    }

    public dynamic class func drawPlaylistButton(frame: CGRect = CGRect(x: 7, y: 6, width: 87, height: 88)) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.darkGray.withAlphaComponent(0.8)
        shadow.shadowOffset = CGSize(width: 2, height: 2)
        shadow.shadowBlurRadius = 3


        //// Subframes
        let playlist: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 69) * 0.50000 + 0.5), y: frame.minY + fastFloor((frame.height - 69) * 0.47368 + 0.5), width: 69, height: 69)


        //// Playlist
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: playlist.minX + 34.5, y: playlist.minY + 6))
        bezierPath.addCurve(to: CGPoint(x: playlist.minX + 18.96, y: playlist.minY + 10.61), controlPoint1: CGPoint(x: playlist.minX + 28.77, y: playlist.minY + 6), controlPoint2: CGPoint(x: playlist.minX + 23.43, y: playlist.minY + 7.69))
        bezierPath.addCurve(to: CGPoint(x: playlist.minX + 6, y: playlist.minY + 34.5), controlPoint1: CGPoint(x: playlist.minX + 11.16, y: playlist.minY + 15.69), controlPoint2: CGPoint(x: playlist.minX + 6, y: playlist.minY + 24.49))
        bezierPath.addCurve(to: CGPoint(x: playlist.minX + 34.5, y: playlist.minY + 63), controlPoint1: CGPoint(x: playlist.minX + 6, y: playlist.minY + 50.24), controlPoint2: CGPoint(x: playlist.minX + 18.76, y: playlist.minY + 63))
        bezierPath.addCurve(to: CGPoint(x: playlist.minX + 63, y: playlist.minY + 34.5), controlPoint1: CGPoint(x: playlist.minX + 50.24, y: playlist.minY + 63), controlPoint2: CGPoint(x: playlist.minX + 63, y: playlist.minY + 50.24))
        bezierPath.addCurve(to: CGPoint(x: playlist.minX + 34.5, y: playlist.minY + 6), controlPoint1: CGPoint(x: playlist.minX + 63, y: playlist.minY + 18.76), controlPoint2: CGPoint(x: playlist.minX + 50.24, y: playlist.minY + 6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: playlist.minX + 69, y: playlist.minY + 34.5))
        bezierPath.addCurve(to: CGPoint(x: playlist.minX + 34.5, y: playlist.minY + 69), controlPoint1: CGPoint(x: playlist.minX + 69, y: playlist.minY + 53.55), controlPoint2: CGPoint(x: playlist.minX + 53.55, y: playlist.minY + 69))
        bezierPath.addCurve(to: CGPoint(x: playlist.minX, y: playlist.minY + 34.5), controlPoint1: CGPoint(x: playlist.minX + 15.45, y: playlist.minY + 69), controlPoint2: CGPoint(x: playlist.minX, y: playlist.minY + 53.55))
        bezierPath.addCurve(to: CGPoint(x: playlist.minX + 13.66, y: playlist.minY + 7.01), controlPoint1: CGPoint(x: playlist.minX, y: playlist.minY + 23.28), controlPoint2: CGPoint(x: playlist.minX + 5.36, y: playlist.minY + 13.31))
        bezierPath.addCurve(to: CGPoint(x: playlist.minX + 34.5, y: playlist.minY), controlPoint1: CGPoint(x: playlist.minX + 19.45, y: playlist.minY + 2.61), controlPoint2: CGPoint(x: playlist.minX + 26.67, y: playlist.minY))
        bezierPath.addCurve(to: CGPoint(x: playlist.minX + 69, y: playlist.minY + 34.5), controlPoint1: CGPoint(x: playlist.minX + 53.55, y: playlist.minY), controlPoint2: CGPoint(x: playlist.minX + 69, y: playlist.minY + 15.45))
        bezierPath.close()
        MightyMetUI.transparent.setFill()
        bezierPath.fill()


        //// Lines
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: playlist.minX + 19, y: playlist.minY + 23, width: 31, height: 3))
        MightyMetUI.transparent.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: playlist.minX + 19, y: playlist.minY + 30, width: 31, height: 3))
        MightyMetUI.transparent.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: playlist.minX + 19, y: playlist.minY + 37, width: 31, height: 3))
        MightyMetUI.transparent.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: playlist.minX + 19, y: playlist.minY + 44, width: 31, height: 3))
        MightyMetUI.transparent.setFill()
        rectangle4Path.fill()




        context.endTransparencyLayer()
        context.restoreGState()
    }

    public dynamic class func drawTempoLight(frame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), flash: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Gradient Declarations
        let darkRedWhite = CGGradient(colorsSpace: nil, colors: [MightyMetUI.darkRed.cgColor, MightyMetUI.darkRed.blended(withFraction: 0.5, of: MightyMetUI.darkRedWhiteColor).cgColor, MightyMetUI.darkRedWhiteColor.cgColor, MightyMetUI.darkRedWhiteColor.blended(withFraction: 0.5, of: UIColor.white).cgColor, UIColor.white.cgColor] as CFArray, locations: [0, 0.31, 0.84, 0.99, 1])!
        let darkRedWhiteOn = CGGradient(colorsSpace: nil, colors: [MightyMetUI.darkRedWhiteOnColor.cgColor, MightyMetUI.darkRedWhiteOnColor.blended(withFraction: 0.5, of: MightyMetUI.darkRedWhiteColor).cgColor, MightyMetUI.darkRedWhiteColor.cgColor, MightyMetUI.darkRedWhiteColor.blended(withFraction: 0.5, of: UIColor.white).cgColor, UIColor.white.cgColor] as CFArray, locations: [0, 0.42, 0.62, 0.98, 1])!


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + 8, y: frame.minY + 7, width: frame.width - 15, height: frame.height - 15)


        //// Group
        //// Off
        //// Oval Drawing
        let ovalRect = CGRect(x: group.minX + fastFloor(group.width * 0.00000 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 1.00000 + 0.5) - fastFloor(group.width * 0.00000 + 0.5), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.00000 + 0.5))
        let ovalPath = UIBezierPath(ovalIn: ovalRect)
        context.saveGState()
        ovalPath.addClip()
        let ovalResizeRatio: CGFloat = min(ovalRect.width / 85, ovalRect.height / 85)
        context.drawRadialGradient(darkRedWhite,
            startCenter: CGPoint(x: ovalRect.midX + 0 * ovalResizeRatio, y: ovalRect.midY + 0 * ovalResizeRatio), startRadius: 43.92 * ovalResizeRatio,
            endCenter: CGPoint(x: ovalRect.midX + -19.88 * ovalResizeRatio, y: ovalRect.midY + -16.17 * ovalResizeRatio), endRadius: 0.33 * ovalResizeRatio,
            options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
        context.restoreGState()
        UIColor.black.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()




        if (flash) {
            //// On
            //// Oval 2 Drawing
            let oval2Rect = CGRect(x: group.minX + fastFloor(group.width * 0.00000 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 1.00000 + 0.5) - fastFloor(group.width * 0.00000 + 0.5), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.00000 + 0.5))
            let oval2Path = UIBezierPath(ovalIn: oval2Rect)
            context.saveGState()
            oval2Path.addClip()
            let oval2ResizeRatio: CGFloat = min(oval2Rect.width / 85, oval2Rect.height / 85)
            context.drawRadialGradient(darkRedWhiteOn,
                startCenter: CGPoint(x: oval2Rect.midX + 0 * oval2ResizeRatio, y: oval2Rect.midY + 0 * oval2ResizeRatio), startRadius: 43.92 * oval2ResizeRatio,
                endCenter: CGPoint(x: oval2Rect.midX + -19.88 * oval2ResizeRatio, y: oval2Rect.midY + -16.17 * oval2ResizeRatio), endRadius: 0.33 * oval2ResizeRatio,
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            UIColor.black.setStroke()
            oval2Path.lineWidth = 1
            oval2Path.stroke()


        }
    }

    public dynamic class func drawDivisionButton(frame: CGRect = CGRect(x: 7, y: 6, width: 87, height: 88), isDivided: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.darkGray.withAlphaComponent(0.8)
        shadow.shadowOffset = CGSize(width: 2, height: 2)
        shadow.shadowBlurRadius = 3


        //// Subframes
        let circle: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 69) * 0.50000 + 0.5), y: frame.minY + fastFloor((frame.height - 69) * 0.47368 + 0.5), width: 69, height: 69)
        let off: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 42) * 0.51111 + 0.5), y: frame.minY + fastFloor((frame.height - 38) * 0.48000 + 0.5), width: 42, height: 38)
        let on: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 42) * 0.51111 + 0.5), y: frame.minY + fastFloor((frame.height - 38) * 0.48000 + 0.5), width: 42, height: 38)


        //// Circle
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: circle.minX + 34.5, y: circle.minY + 6))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 18.96, y: circle.minY + 10.61), controlPoint1: CGPoint(x: circle.minX + 28.77, y: circle.minY + 6), controlPoint2: CGPoint(x: circle.minX + 23.43, y: circle.minY + 7.69))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 6, y: circle.minY + 34.5), controlPoint1: CGPoint(x: circle.minX + 11.16, y: circle.minY + 15.69), controlPoint2: CGPoint(x: circle.minX + 6, y: circle.minY + 24.49))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 34.5, y: circle.minY + 63), controlPoint1: CGPoint(x: circle.minX + 6, y: circle.minY + 50.24), controlPoint2: CGPoint(x: circle.minX + 18.76, y: circle.minY + 63))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 63, y: circle.minY + 34.5), controlPoint1: CGPoint(x: circle.minX + 50.24, y: circle.minY + 63), controlPoint2: CGPoint(x: circle.minX + 63, y: circle.minY + 50.24))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 34.5, y: circle.minY + 6), controlPoint1: CGPoint(x: circle.minX + 63, y: circle.minY + 18.76), controlPoint2: CGPoint(x: circle.minX + 50.24, y: circle.minY + 6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: circle.minX + 69, y: circle.minY + 34.5))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 34.5, y: circle.minY + 69), controlPoint1: CGPoint(x: circle.minX + 69, y: circle.minY + 53.55), controlPoint2: CGPoint(x: circle.minX + 53.55, y: circle.minY + 69))
        bezierPath.addCurve(to: CGPoint(x: circle.minX, y: circle.minY + 34.5), controlPoint1: CGPoint(x: circle.minX + 15.45, y: circle.minY + 69), controlPoint2: CGPoint(x: circle.minX, y: circle.minY + 53.55))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 13.66, y: circle.minY + 7.01), controlPoint1: CGPoint(x: circle.minX, y: circle.minY + 23.28), controlPoint2: CGPoint(x: circle.minX + 5.36, y: circle.minY + 13.31))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 34.5, y: circle.minY), controlPoint1: CGPoint(x: circle.minX + 19.45, y: circle.minY + 2.61), controlPoint2: CGPoint(x: circle.minX + 26.67, y: circle.minY))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 69, y: circle.minY + 34.5), controlPoint1: CGPoint(x: circle.minX + 53.55, y: circle.minY), controlPoint2: CGPoint(x: circle.minX + 69, y: circle.minY + 15.45))
        bezierPath.close()
        MightyMetUI.transparent.setFill()
        bezierPath.fill()


        if (isDivided) {
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: circle.minX + 34.5, y: circle.minY + 6))
            bezier2Path.addCurve(to: CGPoint(x: circle.minX + 18.96, y: circle.minY + 10.61), controlPoint1: CGPoint(x: circle.minX + 28.77, y: circle.minY + 6), controlPoint2: CGPoint(x: circle.minX + 23.43, y: circle.minY + 7.69))
            bezier2Path.addCurve(to: CGPoint(x: circle.minX + 6, y: circle.minY + 34.5), controlPoint1: CGPoint(x: circle.minX + 11.16, y: circle.minY + 15.69), controlPoint2: CGPoint(x: circle.minX + 6, y: circle.minY + 24.49))
            bezier2Path.addCurve(to: CGPoint(x: circle.minX + 34.5, y: circle.minY + 63), controlPoint1: CGPoint(x: circle.minX + 6, y: circle.minY + 50.24), controlPoint2: CGPoint(x: circle.minX + 18.76, y: circle.minY + 63))
            bezier2Path.addCurve(to: CGPoint(x: circle.minX + 63, y: circle.minY + 34.5), controlPoint1: CGPoint(x: circle.minX + 50.24, y: circle.minY + 63), controlPoint2: CGPoint(x: circle.minX + 63, y: circle.minY + 50.24))
            bezier2Path.addCurve(to: CGPoint(x: circle.minX + 34.5, y: circle.minY + 6), controlPoint1: CGPoint(x: circle.minX + 63, y: circle.minY + 18.76), controlPoint2: CGPoint(x: circle.minX + 50.24, y: circle.minY + 6))
            bezier2Path.close()
            bezier2Path.move(to: CGPoint(x: circle.minX + 69, y: circle.minY + 34.5))
            bezier2Path.addCurve(to: CGPoint(x: circle.minX + 34.5, y: circle.minY + 69), controlPoint1: CGPoint(x: circle.minX + 69, y: circle.minY + 53.55), controlPoint2: CGPoint(x: circle.minX + 53.55, y: circle.minY + 69))
            bezier2Path.addCurve(to: CGPoint(x: circle.minX, y: circle.minY + 34.5), controlPoint1: CGPoint(x: circle.minX + 15.45, y: circle.minY + 69), controlPoint2: CGPoint(x: circle.minX, y: circle.minY + 53.55))
            bezier2Path.addCurve(to: CGPoint(x: circle.minX + 13.66, y: circle.minY + 7.01), controlPoint1: CGPoint(x: circle.minX, y: circle.minY + 23.28), controlPoint2: CGPoint(x: circle.minX + 5.36, y: circle.minY + 13.31))
            bezier2Path.addCurve(to: CGPoint(x: circle.minX + 34.5, y: circle.minY), controlPoint1: CGPoint(x: circle.minX + 19.45, y: circle.minY + 2.61), controlPoint2: CGPoint(x: circle.minX + 26.67, y: circle.minY))
            bezier2Path.addCurve(to: CGPoint(x: circle.minX + 69, y: circle.minY + 34.5), controlPoint1: CGPoint(x: circle.minX + 53.55, y: circle.minY), controlPoint2: CGPoint(x: circle.minX + 69, y: circle.minY + 15.45))
            bezier2Path.close()
            MightyMetUI.yellowOrange.setFill()
            bezier2Path.fill()
        }


        context.endTransparencyLayer()
        context.restoreGState()


        //// Off
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: off.minX + 14, y: off.minY, width: 13, height: 13))
        MightyMetUI.transparent.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: off.minX + 14, y: off.minY + 25, width: 13, height: 13))
        MightyMetUI.transparent.setFill()
        oval2Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: off.minX, y: off.minY + 17, width: 42, height: 4))
        MightyMetUI.transparent.setFill()
        rectanglePath.fill()


        context.endTransparencyLayer()
        context.restoreGState()


        if (isDivided) {
            //// On
            context.saveGState()
            context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// Oval 3 Drawing
            let oval3Path = UIBezierPath(ovalIn: CGRect(x: on.minX + 14, y: on.minY, width: 13, height: 13))
            MightyMetUI.yellowOrange.setFill()
            oval3Path.fill()


            //// Oval 4 Drawing
            let oval4Path = UIBezierPath(ovalIn: CGRect(x: on.minX + 14, y: on.minY + 25, width: 13, height: 13))
            MightyMetUI.yellowOrange.setFill()
            oval4Path.fill()


            //// Rectangle 2 Drawing
            let rectangle2Path = UIBezierPath(rect: CGRect(x: on.minX, y: on.minY + 17, width: 42, height: 4))
            MightyMetUI.yellowOrange.setFill()
            rectangle2Path.fill()


            context.endTransparencyLayer()
            context.restoreGState()
        }
    }

    public dynamic class func drawTripletButton(frame: CGRect = CGRect(x: 0, y: 0, width: 66, height: 62), isTriplet: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.darkGray.withAlphaComponent(0.8)
        shadow.shadowOffset = CGSize(width: 2, height: 2)
        shadow.shadowBlurRadius = 3


        //// Subframes
        let circle: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 47) * 0.47368 + 0.5), y: frame.minY + fastFloor((frame.height - 47) * 0.40000 + 0.5), width: 47, height: 47)
        let off: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 26.96) * 0.46093 - 0.49) + 0.99, y: frame.minY + fastFloor((frame.height - 22.82) * 0.45947 + 0.5), width: 26.96, height: 22.82)
        let on: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 26.96) * 0.46093 - 0.49) + 0.99, y: frame.minY + fastFloor((frame.height - 22.82) * 0.45947 + 0.5), width: 26.96, height: 22.82)


        //// Circle
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 12.91, y: circle.minY + 7.22), controlPoint1: CGPoint(x: circle.minX + 19.6, y: circle.minY + 4.09), controlPoint2: CGPoint(x: circle.minX + 15.96, y: circle.minY + 5.24))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 4.09, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 7.6, y: circle.minY + 10.69), controlPoint2: CGPoint(x: circle.minX + 4.09, y: circle.minY + 16.68))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 42.91), controlPoint1: CGPoint(x: circle.minX + 4.09, y: circle.minY + 34.22), controlPoint2: CGPoint(x: circle.minX + 12.78, y: circle.minY + 42.91))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 42.91, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 34.22, y: circle.minY + 42.91), controlPoint2: CGPoint(x: circle.minX + 42.91, y: circle.minY + 34.22))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09), controlPoint1: CGPoint(x: circle.minX + 42.91, y: circle.minY + 12.78), controlPoint2: CGPoint(x: circle.minX + 34.22, y: circle.minY + 4.09))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 47), controlPoint1: CGPoint(x: circle.minX + 47, y: circle.minY + 36.48), controlPoint2: CGPoint(x: circle.minX + 36.48, y: circle.minY + 47))
        bezierPath.addCurve(to: CGPoint(x: circle.minX, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 10.52, y: circle.minY + 47), controlPoint2: CGPoint(x: circle.minX, y: circle.minY + 36.48))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 9.3, y: circle.minY + 4.77), controlPoint1: CGPoint(x: circle.minX, y: circle.minY + 15.86), controlPoint2: CGPoint(x: circle.minX + 3.65, y: circle.minY + 9.06))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY), controlPoint1: CGPoint(x: circle.minX + 13.25, y: circle.minY + 1.78), controlPoint2: CGPoint(x: circle.minX + 18.17, y: circle.minY))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 36.48, y: circle.minY), controlPoint2: CGPoint(x: circle.minX + 47, y: circle.minY + 10.52))
        bezierPath.close()
        MightyMetUI.transparent.setFill()
        bezierPath.fill()


        if (isTriplet) {
            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 12.91, y: circle.minY + 7.22), controlPoint1: CGPoint(x: circle.minX + 19.6, y: circle.minY + 4.09), controlPoint2: CGPoint(x: circle.minX + 15.96, y: circle.minY + 5.24))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 4.09, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 7.6, y: circle.minY + 10.69), controlPoint2: CGPoint(x: circle.minX + 4.09, y: circle.minY + 16.68))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 42.91), controlPoint1: CGPoint(x: circle.minX + 4.09, y: circle.minY + 34.22), controlPoint2: CGPoint(x: circle.minX + 12.78, y: circle.minY + 42.91))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 42.91, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 34.22, y: circle.minY + 42.91), controlPoint2: CGPoint(x: circle.minX + 42.91, y: circle.minY + 34.22))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09), controlPoint1: CGPoint(x: circle.minX + 42.91, y: circle.minY + 12.78), controlPoint2: CGPoint(x: circle.minX + 34.22, y: circle.minY + 4.09))
            bezier14Path.close()
            bezier14Path.move(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 47), controlPoint1: CGPoint(x: circle.minX + 47, y: circle.minY + 36.48), controlPoint2: CGPoint(x: circle.minX + 36.48, y: circle.minY + 47))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 10.52, y: circle.minY + 47), controlPoint2: CGPoint(x: circle.minX, y: circle.minY + 36.48))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 9.3, y: circle.minY + 4.77), controlPoint1: CGPoint(x: circle.minX, y: circle.minY + 15.86), controlPoint2: CGPoint(x: circle.minX + 3.65, y: circle.minY + 9.06))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY), controlPoint1: CGPoint(x: circle.minX + 13.25, y: circle.minY + 1.78), controlPoint2: CGPoint(x: circle.minX + 18.17, y: circle.minY))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 36.48, y: circle.minY), controlPoint2: CGPoint(x: circle.minX + 47, y: circle.minY + 10.52))
            bezier14Path.close()
            MightyMetUI.yellowOrange.setFill()
            bezier14Path.fill()
        }


        context.endTransparencyLayer()
        context.restoreGState()


        //// Off
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Text Drawing
        let textRect = CGRect(x: off.minX + 12.01, y: off.minY, width: 6, height: 10)
        let textTextContent = "3"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .left
        let textFontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Italic", size: 10)!, NSForegroundColorAttributeName: MightyMetUI.transparent, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: off.minX + 3.51, y: off.minY + 4.5))
        bezier2Path.addCurve(to: CGPoint(x: off.minX + 10.51, y: off.minY + 4.5), controlPoint1: CGPoint(x: off.minX + 10.51, y: off.minY + 4.5), controlPoint2: CGPoint(x: off.minX + 10.51, y: off.minY + 4.5))
        MightyMetUI.transparent.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: off.minX + 19.51, y: off.minY + 4.5))
        bezier3Path.addCurve(to: CGPoint(x: off.minX + 26.51, y: off.minY + 4.5), controlPoint1: CGPoint(x: off.minX + 26.51, y: off.minY + 4.5), controlPoint2: CGPoint(x: off.minX + 26.51, y: off.minY + 4.5))
        MightyMetUI.transparent.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: off.minX + 3.51, y: off.minY + 10.5))
        bezier4Path.addCurve(to: CGPoint(x: off.minX + 26.51, y: off.minY + 10.5), controlPoint1: CGPoint(x: off.minX + 26.51, y: off.minY + 10.5), controlPoint2: CGPoint(x: off.minX + 26.51, y: off.minY + 10.5))
        MightyMetUI.transparent.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 3.97, y: off.minY + 15.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: -4.5, y: 0))
        bezier5Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
        MightyMetUI.transparent.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()

        context.restoreGState()


        //// Bezier 6 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 15.01, y: off.minY + 15.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: -4.5, y: 0))
        bezier6Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
        MightyMetUI.transparent.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.stroke()

        context.restoreGState()


        //// Bezier 7 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 26.05, y: off.minY + 15.5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: -4.5, y: 0))
        bezier7Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
        MightyMetUI.transparent.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.stroke()

        context.restoreGState()


        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 2.48, y: off.minY + 20.53)
        context.rotate(by: -30 * CGFloat.pi/180)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
        MightyMetUI.transparent.setFill()
        ovalPath.fill()

        context.restoreGState()


        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 13.48, y: off.minY + 20.53)
        context.rotate(by: -30 * CGFloat.pi/180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
        MightyMetUI.transparent.setFill()
        oval2Path.fill()

        context.restoreGState()


        //// Oval 5 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 24.48, y: off.minY + 20.53)
        context.rotate(by: -30 * CGFloat.pi/180)

        let oval5Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
        MightyMetUI.transparent.setFill()
        oval5Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        if (isTriplet) {
            //// On
            context.saveGState()
            context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// Text 2 Drawing
            let text2Rect = CGRect(x: on.minX + 12.01, y: on.minY, width: 6, height: 10)
            let text2TextContent = "3"
            let text2Style = NSMutableParagraphStyle()
            text2Style.alignment = .left
            let text2FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-Italic", size: 10)!, NSForegroundColorAttributeName: MightyMetUI.yellowOrange, NSParagraphStyleAttributeName: text2Style]

            let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
            context.saveGState()
            context.clip(to: text2Rect)
            text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
            context.restoreGState()


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: on.minX + 3.51, y: on.minY + 4.5))
            bezier8Path.addCurve(to: CGPoint(x: on.minX + 10.51, y: on.minY + 4.5), controlPoint1: CGPoint(x: on.minX + 10.51, y: on.minY + 4.5), controlPoint2: CGPoint(x: on.minX + 10.51, y: on.minY + 4.5))
            MightyMetUI.yellowOrange.setFill()
            bezier8Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            bezier8Path.lineWidth = 1
            bezier8Path.stroke()


            //// Bezier 9 Drawing
            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: on.minX + 19.51, y: on.minY + 4.5))
            bezier9Path.addCurve(to: CGPoint(x: on.minX + 26.51, y: on.minY + 4.5), controlPoint1: CGPoint(x: on.minX + 26.51, y: on.minY + 4.5), controlPoint2: CGPoint(x: on.minX + 26.51, y: on.minY + 4.5))
            MightyMetUI.yellowOrange.setFill()
            bezier9Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            bezier9Path.lineWidth = 1
            bezier9Path.stroke()


            //// Bezier 10 Drawing
            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: on.minX + 3.51, y: on.minY + 10.5))
            bezier10Path.addCurve(to: CGPoint(x: on.minX + 26.51, y: on.minY + 10.5), controlPoint1: CGPoint(x: on.minX + 26.51, y: on.minY + 10.5), controlPoint2: CGPoint(x: on.minX + 26.51, y: on.minY + 10.5))
            MightyMetUI.yellowOrange.setFill()
            bezier10Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            bezier10Path.lineWidth = 1
            bezier10Path.stroke()


            //// Bezier 11 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 3.97, y: on.minY + 15.5)
            context.rotate(by: -90 * CGFloat.pi/180)

            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: -4.5, y: 0))
            bezier11Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
            MightyMetUI.yellowOrange.setFill()
            bezier11Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            bezier11Path.lineWidth = 1
            bezier11Path.stroke()

            context.restoreGState()


            //// Bezier 12 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 15.01, y: on.minY + 15.5)
            context.rotate(by: -90 * CGFloat.pi/180)

            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: -4.5, y: 0))
            bezier12Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
            MightyMetUI.yellowOrange.setFill()
            bezier12Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            bezier12Path.lineWidth = 1
            bezier12Path.stroke()

            context.restoreGState()


            //// Bezier 13 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 26.05, y: on.minY + 15.5)
            context.rotate(by: -90 * CGFloat.pi/180)

            let bezier13Path = UIBezierPath()
            bezier13Path.move(to: CGPoint(x: -4.5, y: 0))
            bezier13Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
            MightyMetUI.yellowOrange.setFill()
            bezier13Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            bezier13Path.lineWidth = 1
            bezier13Path.stroke()

            context.restoreGState()


            //// Oval 3 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 2.48, y: on.minY + 20.53)
            context.rotate(by: -30 * CGFloat.pi/180)

            let oval3Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
            MightyMetUI.yellowOrange.setFill()
            oval3Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            oval3Path.lineWidth = 1
            oval3Path.stroke()

            context.restoreGState()


            //// Oval 4 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 13.48, y: on.minY + 20.53)
            context.rotate(by: -30 * CGFloat.pi/180)

            let oval4Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
            MightyMetUI.yellowOrange.setFill()
            oval4Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            oval4Path.lineWidth = 1
            oval4Path.stroke()

            context.restoreGState()


            //// Oval 6 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 24.48, y: on.minY + 20.53)
            context.rotate(by: -30 * CGFloat.pi/180)

            let oval6Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
            MightyMetUI.yellowOrange.setFill()
            oval6Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            oval6Path.lineWidth = 1
            oval6Path.stroke()

            context.restoreGState()


            context.endTransparencyLayer()
            context.restoreGState()
        }
    }

    public dynamic class func draw_16thButton(frame: CGRect = CGRect(x: 0, y: 0, width: 66, height: 62), is16th: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.darkGray.withAlphaComponent(0.8)
        shadow.shadowOffset = CGSize(width: 2, height: 2)
        shadow.shadowBlurRadius = 3


        //// Subframes
        let circle: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 47) * 0.47368 + 0.5), y: frame.minY + fastFloor((frame.height - 47) * 0.33333 + 0.5), width: 47, height: 47)
        let off: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 26.96) * 0.46093 - 0.49) + 0.99, y: frame.minY + fastFloor((frame.height - 12.33) * 0.47306) + 0.5, width: 26.96, height: 12.33)
        let on: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 26.96) * 0.46093 - 0.49) + 0.99, y: frame.minY + fastFloor((frame.height - 12.33) * 0.47306) + 0.5, width: 26.96, height: 12.33)


        //// Circle
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 12.91, y: circle.minY + 7.22), controlPoint1: CGPoint(x: circle.minX + 19.6, y: circle.minY + 4.09), controlPoint2: CGPoint(x: circle.minX + 15.96, y: circle.minY + 5.24))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 4.09, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 7.6, y: circle.minY + 10.69), controlPoint2: CGPoint(x: circle.minX + 4.09, y: circle.minY + 16.68))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 42.91), controlPoint1: CGPoint(x: circle.minX + 4.09, y: circle.minY + 34.22), controlPoint2: CGPoint(x: circle.minX + 12.78, y: circle.minY + 42.91))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 42.91, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 34.22, y: circle.minY + 42.91), controlPoint2: CGPoint(x: circle.minX + 42.91, y: circle.minY + 34.22))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09), controlPoint1: CGPoint(x: circle.minX + 42.91, y: circle.minY + 12.78), controlPoint2: CGPoint(x: circle.minX + 34.22, y: circle.minY + 4.09))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 47), controlPoint1: CGPoint(x: circle.minX + 47, y: circle.minY + 36.48), controlPoint2: CGPoint(x: circle.minX + 36.48, y: circle.minY + 47))
        bezierPath.addCurve(to: CGPoint(x: circle.minX, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 10.52, y: circle.minY + 47), controlPoint2: CGPoint(x: circle.minX, y: circle.minY + 36.48))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 9.3, y: circle.minY + 4.77), controlPoint1: CGPoint(x: circle.minX, y: circle.minY + 15.86), controlPoint2: CGPoint(x: circle.minX + 3.65, y: circle.minY + 9.06))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY), controlPoint1: CGPoint(x: circle.minX + 13.25, y: circle.minY + 1.78), controlPoint2: CGPoint(x: circle.minX + 18.17, y: circle.minY))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 36.48, y: circle.minY), controlPoint2: CGPoint(x: circle.minX + 47, y: circle.minY + 10.52))
        bezierPath.close()
        MightyMetUI.transparent.setFill()
        bezierPath.fill()


        if (is16th) {
            //// Bezier 14 Drawing
            let bezier14Path = UIBezierPath()
            bezier14Path.move(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 12.91, y: circle.minY + 7.22), controlPoint1: CGPoint(x: circle.minX + 19.6, y: circle.minY + 4.09), controlPoint2: CGPoint(x: circle.minX + 15.96, y: circle.minY + 5.24))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 4.09, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 7.6, y: circle.minY + 10.69), controlPoint2: CGPoint(x: circle.minX + 4.09, y: circle.minY + 16.68))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 42.91), controlPoint1: CGPoint(x: circle.minX + 4.09, y: circle.minY + 34.22), controlPoint2: CGPoint(x: circle.minX + 12.78, y: circle.minY + 42.91))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 42.91, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 34.22, y: circle.minY + 42.91), controlPoint2: CGPoint(x: circle.minX + 42.91, y: circle.minY + 34.22))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09), controlPoint1: CGPoint(x: circle.minX + 42.91, y: circle.minY + 12.78), controlPoint2: CGPoint(x: circle.minX + 34.22, y: circle.minY + 4.09))
            bezier14Path.close()
            bezier14Path.move(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 47), controlPoint1: CGPoint(x: circle.minX + 47, y: circle.minY + 36.48), controlPoint2: CGPoint(x: circle.minX + 36.48, y: circle.minY + 47))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 10.52, y: circle.minY + 47), controlPoint2: CGPoint(x: circle.minX, y: circle.minY + 36.48))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 9.3, y: circle.minY + 4.77), controlPoint1: CGPoint(x: circle.minX, y: circle.minY + 15.86), controlPoint2: CGPoint(x: circle.minX + 3.65, y: circle.minY + 9.06))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY), controlPoint1: CGPoint(x: circle.minX + 13.25, y: circle.minY + 1.78), controlPoint2: CGPoint(x: circle.minX + 18.17, y: circle.minY))
            bezier14Path.addCurve(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 36.48, y: circle.minY), controlPoint2: CGPoint(x: circle.minX + 47, y: circle.minY + 10.52))
            bezier14Path.close()
            MightyMetUI.yellowOrange.setFill()
            bezier14Path.fill()
        }


        context.endTransparencyLayer()
        context.restoreGState()


        //// Off
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: off.minX + 3.51, y: off.minY))
        bezier4Path.addCurve(to: CGPoint(x: off.minX + 26.51, y: off.minY + 0), controlPoint1: CGPoint(x: off.minX + 26.51, y: off.minY), controlPoint2: CGPoint(x: off.minX + 26.51, y: off.minY + 0))
        MightyMetUI.transparent.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 3.97, y: off.minY + 5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: -4.5, y: 0))
        bezier5Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
        MightyMetUI.transparent.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()

        context.restoreGState()


        //// Bezier 6 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 11.01, y: off.minY + 5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: -4.5, y: 0))
        bezier6Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
        MightyMetUI.transparent.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.stroke()

        context.restoreGState()


        //// Bezier 7 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 19.05, y: off.minY + 5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: -4.5, y: 0))
        bezier7Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
        MightyMetUI.transparent.setStroke()
        bezier7Path.lineWidth = 1
        bezier7Path.stroke()

        context.restoreGState()


        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 2.48, y: off.minY + 10.03)
        context.rotate(by: -30 * CGFloat.pi/180)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
        MightyMetUI.transparent.setFill()
        ovalPath.fill()

        context.restoreGState()


        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 9.48, y: off.minY + 10.03)
        context.rotate(by: -30 * CGFloat.pi/180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
        MightyMetUI.transparent.setFill()
        oval2Path.fill()

        context.restoreGState()


        //// Oval 5 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 17.48, y: off.minY + 10.03)
        context.rotate(by: -30 * CGFloat.pi/180)

        let oval5Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
        MightyMetUI.transparent.setFill()
        oval5Path.fill()

        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: off.minX + 3.51, y: off.minY + 2))
        bezier2Path.addCurve(to: CGPoint(x: off.minX + 26.51, y: off.minY + 2), controlPoint1: CGPoint(x: off.minX + 26.51, y: off.minY + 2), controlPoint2: CGPoint(x: off.minX + 26.51, y: off.minY + 2))
        MightyMetUI.transparent.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Bezier 3 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 26.05, y: off.minY + 5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: -4.5, y: 0))
        bezier3Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
        MightyMetUI.transparent.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()

        context.restoreGState()


        //// Oval 7 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 24.48, y: off.minY + 10.03)
        context.rotate(by: -30 * CGFloat.pi/180)

        let oval7Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
        MightyMetUI.transparent.setFill()
        oval7Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        if (is16th) {
            //// On
            context.saveGState()
            context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)


            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: on.minX + 3.51, y: on.minY))
            bezier8Path.addCurve(to: CGPoint(x: on.minX + 26.51, y: on.minY + 0), controlPoint1: CGPoint(x: on.minX + 26.51, y: on.minY), controlPoint2: CGPoint(x: on.minX + 26.51, y: on.minY + 0))
            MightyMetUI.yellowOrange.setFill()
            bezier8Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            bezier8Path.lineWidth = 1
            bezier8Path.stroke()


            //// Bezier 9 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 3.97, y: on.minY + 5)
            context.rotate(by: -90 * CGFloat.pi/180)

            let bezier9Path = UIBezierPath()
            bezier9Path.move(to: CGPoint(x: -4.5, y: 0))
            bezier9Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
            MightyMetUI.yellowOrange.setFill()
            bezier9Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            bezier9Path.lineWidth = 1
            bezier9Path.stroke()

            context.restoreGState()


            //// Bezier 10 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 11.01, y: on.minY + 5)
            context.rotate(by: -90 * CGFloat.pi/180)

            let bezier10Path = UIBezierPath()
            bezier10Path.move(to: CGPoint(x: -4.5, y: 0))
            bezier10Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
            MightyMetUI.yellowOrange.setFill()
            bezier10Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            bezier10Path.lineWidth = 1
            bezier10Path.stroke()

            context.restoreGState()


            //// Bezier 11 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 19.05, y: on.minY + 5)
            context.rotate(by: -90 * CGFloat.pi/180)

            let bezier11Path = UIBezierPath()
            bezier11Path.move(to: CGPoint(x: -4.5, y: 0))
            bezier11Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
            MightyMetUI.yellowOrange.setFill()
            bezier11Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            bezier11Path.lineWidth = 1
            bezier11Path.stroke()

            context.restoreGState()


            //// Oval 3 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 2.48, y: on.minY + 10.03)
            context.rotate(by: -30 * CGFloat.pi/180)

            let oval3Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
            MightyMetUI.yellowOrange.setFill()
            oval3Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            oval3Path.lineWidth = 1
            oval3Path.stroke()

            context.restoreGState()


            //// Oval 4 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 9.48, y: on.minY + 10.03)
            context.rotate(by: -30 * CGFloat.pi/180)

            let oval4Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
            MightyMetUI.yellowOrange.setFill()
            oval4Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            oval4Path.lineWidth = 1
            oval4Path.stroke()

            context.restoreGState()


            //// Oval 6 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 17.48, y: on.minY + 10.03)
            context.rotate(by: -30 * CGFloat.pi/180)

            let oval6Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
            MightyMetUI.yellowOrange.setFill()
            oval6Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            oval6Path.lineWidth = 1
            oval6Path.stroke()

            context.restoreGState()


            //// Bezier 12 Drawing
            let bezier12Path = UIBezierPath()
            bezier12Path.move(to: CGPoint(x: on.minX + 3.51, y: on.minY + 2))
            bezier12Path.addCurve(to: CGPoint(x: on.minX + 26.51, y: on.minY + 2), controlPoint1: CGPoint(x: on.minX + 26.51, y: on.minY + 2), controlPoint2: CGPoint(x: on.minX + 26.51, y: on.minY + 2))
            MightyMetUI.yellowOrange.setFill()
            bezier12Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            bezier12Path.lineWidth = 1
            bezier12Path.stroke()


            //// Bezier 13 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 26.05, y: on.minY + 5)
            context.rotate(by: -90 * CGFloat.pi/180)

            let bezier13Path = UIBezierPath()
            bezier13Path.move(to: CGPoint(x: -4.5, y: 0))
            bezier13Path.addCurve(to: CGPoint(x: 4.5, y: 0), controlPoint1: CGPoint(x: 4.5, y: 0), controlPoint2: CGPoint(x: 4.5, y: 0))
            MightyMetUI.yellowOrange.setFill()
            bezier13Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            bezier13Path.lineWidth = 1
            bezier13Path.stroke()

            context.restoreGState()


            //// Oval 8 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 24.48, y: on.minY + 10.03)
            context.rotate(by: -30 * CGFloat.pi/180)

            let oval8Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
            MightyMetUI.yellowOrange.setFill()
            oval8Path.fill()
            MightyMetUI.yellowOrange.setStroke()
            oval8Path.lineWidth = 1
            oval8Path.stroke()

            context.restoreGState()


            context.endTransparencyLayer()
            context.restoreGState()
        }
    }

    public dynamic class func drawQuarterButton(frame: CGRect = CGRect(x: 0, y: 0, width: 66, height: 62), isQuarter: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.darkGray.withAlphaComponent(0.8)
        shadow.shadowOffset = CGSize(width: 2, height: 2)
        shadow.shadowBlurRadius = 3


        //// Subframes
        let circle: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 47) * 0.47368 + 0.5), y: frame.minY + fastFloor((frame.height - 47) * 0.40000 + 0.5), width: 47, height: 47)
        let off: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 7.31) * 0.49105 - 0.32) + 0.82, y: frame.minY + fastFloor((frame.height - 24.32) * 0.49103) + 0.5, width: 7.31, height: 24.32)
        let on: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 7.31) * 0.49105 - 0.32) + 0.82, y: frame.minY + fastFloor((frame.height - 24.32) * 0.49103) + 0.5, width: 7.31, height: 24.32)


        //// Circle
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 12.91, y: circle.minY + 7.22), controlPoint1: CGPoint(x: circle.minX + 19.6, y: circle.minY + 4.09), controlPoint2: CGPoint(x: circle.minX + 15.96, y: circle.minY + 5.24))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 4.09, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 7.6, y: circle.minY + 10.69), controlPoint2: CGPoint(x: circle.minX + 4.09, y: circle.minY + 16.68))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 42.91), controlPoint1: CGPoint(x: circle.minX + 4.09, y: circle.minY + 34.22), controlPoint2: CGPoint(x: circle.minX + 12.78, y: circle.minY + 42.91))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 42.91, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 34.22, y: circle.minY + 42.91), controlPoint2: CGPoint(x: circle.minX + 42.91, y: circle.minY + 34.22))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09), controlPoint1: CGPoint(x: circle.minX + 42.91, y: circle.minY + 12.78), controlPoint2: CGPoint(x: circle.minX + 34.22, y: circle.minY + 4.09))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 47), controlPoint1: CGPoint(x: circle.minX + 47, y: circle.minY + 36.48), controlPoint2: CGPoint(x: circle.minX + 36.48, y: circle.minY + 47))
        bezierPath.addCurve(to: CGPoint(x: circle.minX, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 10.52, y: circle.minY + 47), controlPoint2: CGPoint(x: circle.minX, y: circle.minY + 36.48))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 9.3, y: circle.minY + 4.77), controlPoint1: CGPoint(x: circle.minX, y: circle.minY + 15.86), controlPoint2: CGPoint(x: circle.minX + 3.65, y: circle.minY + 9.06))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY), controlPoint1: CGPoint(x: circle.minX + 13.25, y: circle.minY + 1.78), controlPoint2: CGPoint(x: circle.minX + 18.17, y: circle.minY))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 36.48, y: circle.minY), controlPoint2: CGPoint(x: circle.minX + 47, y: circle.minY + 10.52))
        bezierPath.close()
        MightyMetUI.transparent.setFill()
        bezierPath.fill()


        if (isQuarter) {
            //// Bezier 4 Drawing
            let bezier4Path = UIBezierPath()
            bezier4Path.move(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09))
            bezier4Path.addCurve(to: CGPoint(x: circle.minX + 12.91, y: circle.minY + 7.22), controlPoint1: CGPoint(x: circle.minX + 19.6, y: circle.minY + 4.09), controlPoint2: CGPoint(x: circle.minX + 15.96, y: circle.minY + 5.24))
            bezier4Path.addCurve(to: CGPoint(x: circle.minX + 4.09, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 7.6, y: circle.minY + 10.69), controlPoint2: CGPoint(x: circle.minX + 4.09, y: circle.minY + 16.68))
            bezier4Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 42.91), controlPoint1: CGPoint(x: circle.minX + 4.09, y: circle.minY + 34.22), controlPoint2: CGPoint(x: circle.minX + 12.78, y: circle.minY + 42.91))
            bezier4Path.addCurve(to: CGPoint(x: circle.minX + 42.91, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 34.22, y: circle.minY + 42.91), controlPoint2: CGPoint(x: circle.minX + 42.91, y: circle.minY + 34.22))
            bezier4Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09), controlPoint1: CGPoint(x: circle.minX + 42.91, y: circle.minY + 12.78), controlPoint2: CGPoint(x: circle.minX + 34.22, y: circle.minY + 4.09))
            bezier4Path.close()
            bezier4Path.move(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5))
            bezier4Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 47), controlPoint1: CGPoint(x: circle.minX + 47, y: circle.minY + 36.48), controlPoint2: CGPoint(x: circle.minX + 36.48, y: circle.minY + 47))
            bezier4Path.addCurve(to: CGPoint(x: circle.minX, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 10.52, y: circle.minY + 47), controlPoint2: CGPoint(x: circle.minX, y: circle.minY + 36.48))
            bezier4Path.addCurve(to: CGPoint(x: circle.minX + 9.3, y: circle.minY + 4.77), controlPoint1: CGPoint(x: circle.minX, y: circle.minY + 15.86), controlPoint2: CGPoint(x: circle.minX + 3.65, y: circle.minY + 9.06))
            bezier4Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY), controlPoint1: CGPoint(x: circle.minX + 13.25, y: circle.minY + 1.78), controlPoint2: CGPoint(x: circle.minX + 18.17, y: circle.minY))
            bezier4Path.addCurve(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 36.48, y: circle.minY), controlPoint2: CGPoint(x: circle.minX + 47, y: circle.minY + 10.52))
            bezier4Path.close()
            MightyMetUI.yellowOrange.setFill()
            bezier4Path.fill()
        }


        context.endTransparencyLayer()
        context.restoreGState()


        //// Off
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: off.minX + 5.09, y: off.minY))
        bezier3Path.addLine(to: CGPoint(x: off.minX + 5.09, y: off.minY + 19.37))
        MightyMetUI.transparent.setStroke()
        bezier3Path.lineWidth = 1
        bezier3Path.stroke()


        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 3.66, y: off.minY + 20.9)
        context.rotate(by: -30 * CGFloat.pi/180)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: -2.91, y: -2.28, width: 5.81, height: 4.56))
        MightyMetUI.transparent.setFill()
        ovalPath.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        if (isQuarter) {
            //// On
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: on.minX + 5.09, y: on.minY))
            bezier2Path.addLine(to: CGPoint(x: on.minX + 5.09, y: on.minY + 19.37))
            context.saveGState()
            context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
            MightyMetUI.yellowOrange.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.stroke()
            context.restoreGState()


            //// Oval 2 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 3.66, y: on.minY + 20.9)
            context.rotate(by: -30 * CGFloat.pi/180)

            let oval2Path = UIBezierPath(ovalIn: CGRect(x: -2.91, y: -2.28, width: 5.81, height: 4.56))
            MightyMetUI.yellowOrange.setFill()
            oval2Path.fill()

            context.restoreGState()


        }
    }

    public dynamic class func draw_8thButton(frame: CGRect = CGRect(x: 0, y: 0, width: 66, height: 62), is8th: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.darkGray.withAlphaComponent(0.8)
        shadow.shadowOffset = CGSize(width: 2, height: 2)
        shadow.shadowBlurRadius = 3


        //// Subframes
        let circle: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 47) * 0.47368 + 0.5), y: frame.minY + fastFloor((frame.height - 47) * 0.40000 + 0.5), width: 47, height: 47)
        let off: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 15.96) * 0.49950 - 0.49) + 0.99, y: frame.minY + fastFloor((frame.height - 15.33) * 0.50346) + 0.5, width: 15.96, height: 15.33)
        let on: CGRect = CGRect(x: frame.minX + fastFloor((frame.width - 15.96) * 0.49950 - 0.49) + 0.99, y: frame.minY + fastFloor((frame.height - 15.33) * 0.50346) + 0.5, width: 15.96, height: 15.33)


        //// Circle
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 12.91, y: circle.minY + 7.22), controlPoint1: CGPoint(x: circle.minX + 19.6, y: circle.minY + 4.09), controlPoint2: CGPoint(x: circle.minX + 15.96, y: circle.minY + 5.24))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 4.09, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 7.6, y: circle.minY + 10.69), controlPoint2: CGPoint(x: circle.minX + 4.09, y: circle.minY + 16.68))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 42.91), controlPoint1: CGPoint(x: circle.minX + 4.09, y: circle.minY + 34.22), controlPoint2: CGPoint(x: circle.minX + 12.78, y: circle.minY + 42.91))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 42.91, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 34.22, y: circle.minY + 42.91), controlPoint2: CGPoint(x: circle.minX + 42.91, y: circle.minY + 34.22))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09), controlPoint1: CGPoint(x: circle.minX + 42.91, y: circle.minY + 12.78), controlPoint2: CGPoint(x: circle.minX + 34.22, y: circle.minY + 4.09))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 47), controlPoint1: CGPoint(x: circle.minX + 47, y: circle.minY + 36.48), controlPoint2: CGPoint(x: circle.minX + 36.48, y: circle.minY + 47))
        bezierPath.addCurve(to: CGPoint(x: circle.minX, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 10.52, y: circle.minY + 47), controlPoint2: CGPoint(x: circle.minX, y: circle.minY + 36.48))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 9.3, y: circle.minY + 4.77), controlPoint1: CGPoint(x: circle.minX, y: circle.minY + 15.86), controlPoint2: CGPoint(x: circle.minX + 3.65, y: circle.minY + 9.06))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY), controlPoint1: CGPoint(x: circle.minX + 13.25, y: circle.minY + 1.78), controlPoint2: CGPoint(x: circle.minX + 18.17, y: circle.minY))
        bezierPath.addCurve(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 36.48, y: circle.minY), controlPoint2: CGPoint(x: circle.minX + 47, y: circle.minY + 10.52))
        bezierPath.close()
        MightyMetUI.transparent.setFill()
        bezierPath.fill()


        if (is8th) {
            //// Bezier 8 Drawing
            let bezier8Path = UIBezierPath()
            bezier8Path.move(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09))
            bezier8Path.addCurve(to: CGPoint(x: circle.minX + 12.91, y: circle.minY + 7.22), controlPoint1: CGPoint(x: circle.minX + 19.6, y: circle.minY + 4.09), controlPoint2: CGPoint(x: circle.minX + 15.96, y: circle.minY + 5.24))
            bezier8Path.addCurve(to: CGPoint(x: circle.minX + 4.09, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 7.6, y: circle.minY + 10.69), controlPoint2: CGPoint(x: circle.minX + 4.09, y: circle.minY + 16.68))
            bezier8Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 42.91), controlPoint1: CGPoint(x: circle.minX + 4.09, y: circle.minY + 34.22), controlPoint2: CGPoint(x: circle.minX + 12.78, y: circle.minY + 42.91))
            bezier8Path.addCurve(to: CGPoint(x: circle.minX + 42.91, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 34.22, y: circle.minY + 42.91), controlPoint2: CGPoint(x: circle.minX + 42.91, y: circle.minY + 34.22))
            bezier8Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 4.09), controlPoint1: CGPoint(x: circle.minX + 42.91, y: circle.minY + 12.78), controlPoint2: CGPoint(x: circle.minX + 34.22, y: circle.minY + 4.09))
            bezier8Path.close()
            bezier8Path.move(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5))
            bezier8Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY + 47), controlPoint1: CGPoint(x: circle.minX + 47, y: circle.minY + 36.48), controlPoint2: CGPoint(x: circle.minX + 36.48, y: circle.minY + 47))
            bezier8Path.addCurve(to: CGPoint(x: circle.minX, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 10.52, y: circle.minY + 47), controlPoint2: CGPoint(x: circle.minX, y: circle.minY + 36.48))
            bezier8Path.addCurve(to: CGPoint(x: circle.minX + 9.3, y: circle.minY + 4.77), controlPoint1: CGPoint(x: circle.minX, y: circle.minY + 15.86), controlPoint2: CGPoint(x: circle.minX + 3.65, y: circle.minY + 9.06))
            bezier8Path.addCurve(to: CGPoint(x: circle.minX + 23.5, y: circle.minY), controlPoint1: CGPoint(x: circle.minX + 13.25, y: circle.minY + 1.78), controlPoint2: CGPoint(x: circle.minX + 18.17, y: circle.minY))
            bezier8Path.addCurve(to: CGPoint(x: circle.minX + 47, y: circle.minY + 23.5), controlPoint1: CGPoint(x: circle.minX + 36.48, y: circle.minY), controlPoint2: CGPoint(x: circle.minX + 47, y: circle.minY + 10.52))
            bezier8Path.close()
            MightyMetUI.yellowOrange.setFill()
            bezier8Path.fill()
        }


        context.endTransparencyLayer()
        context.restoreGState()


        //// Off
        context.saveGState()
        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: off.minX + 3.51, y: off.minY))
        bezier4Path.addCurve(to: CGPoint(x: off.minX + 15.51, y: off.minY + 0), controlPoint1: CGPoint(x: off.minX + 15.51, y: off.minY), controlPoint2: CGPoint(x: off.minX + 15.51, y: off.minY + 0))
        MightyMetUI.transparent.setStroke()
        bezier4Path.lineWidth = 1
        bezier4Path.stroke()


        //// Bezier 5 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 3.97, y: off.minY + 5)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: -7, y: -0))
        bezier5Path.addCurve(to: CGPoint(x: 4.5, y: -0), controlPoint1: CGPoint(x: 4.5, y: -0), controlPoint2: CGPoint(x: 4.5, y: -0))
        MightyMetUI.transparent.setStroke()
        bezier5Path.lineWidth = 1
        bezier5Path.stroke()

        context.restoreGState()


        //// Bezier 6 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 14.92, y: off.minY + 6.25)
        context.rotate(by: -90 * CGFloat.pi/180)

        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: -5.75, y: 0))
        bezier6Path.addCurve(to: CGPoint(x: 5.75, y: 0), controlPoint1: CGPoint(x: 5.75, y: 0), controlPoint2: CGPoint(x: 5.75, y: 0))
        MightyMetUI.transparent.setStroke()
        bezier6Path.lineWidth = 1
        bezier6Path.stroke()

        context.restoreGState()


        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 2.48, y: off.minY + 13.03)
        context.rotate(by: -30 * CGFloat.pi/180)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
        MightyMetUI.transparent.setFill()
        ovalPath.fill()

        context.restoreGState()


        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: off.minX + 13.48, y: off.minY + 13.03)
        context.rotate(by: -30 * CGFloat.pi/180)

        let oval2Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
        MightyMetUI.transparent.setFill()
        oval2Path.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        if (is8th) {
            //// On
            //// Bezier 2 Drawing
            let bezier2Path = UIBezierPath()
            bezier2Path.move(to: CGPoint(x: on.minX + 3.51, y: on.minY))
            bezier2Path.addCurve(to: CGPoint(x: on.minX + 15.51, y: on.minY + 0), controlPoint1: CGPoint(x: on.minX + 15.51, y: on.minY), controlPoint2: CGPoint(x: on.minX + 15.51, y: on.minY + 0))
            MightyMetUI.yellowOrange.setStroke()
            bezier2Path.lineWidth = 1
            bezier2Path.stroke()


            //// Bezier 3 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 3.97, y: on.minY + 5)
            context.rotate(by: -90 * CGFloat.pi/180)

            let bezier3Path = UIBezierPath()
            bezier3Path.move(to: CGPoint(x: -7, y: -0))
            bezier3Path.addCurve(to: CGPoint(x: 4.5, y: -0), controlPoint1: CGPoint(x: 4.5, y: -0), controlPoint2: CGPoint(x: 4.5, y: -0))
            MightyMetUI.yellowOrange.setStroke()
            bezier3Path.lineWidth = 1
            bezier3Path.stroke()

            context.restoreGState()


            //// Bezier 7 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 14.92, y: on.minY + 6.25)
            context.rotate(by: -90 * CGFloat.pi/180)

            let bezier7Path = UIBezierPath()
            bezier7Path.move(to: CGPoint(x: -5.75, y: 0))
            bezier7Path.addCurve(to: CGPoint(x: 5.75, y: 0), controlPoint1: CGPoint(x: 5.75, y: 0), controlPoint2: CGPoint(x: 5.75, y: 0))
            MightyMetUI.yellowOrange.setStroke()
            bezier7Path.lineWidth = 1
            bezier7Path.stroke()

            context.restoreGState()


            //// Oval 3 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 2.48, y: on.minY + 13.03)
            context.rotate(by: -30 * CGFloat.pi/180)

            let oval3Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
            MightyMetUI.yellowOrange.setFill()
            oval3Path.fill()

            context.restoreGState()


            //// Oval 4 Drawing
            context.saveGState()
            context.translateBy(x: on.minX + 13.48, y: on.minY + 13.03)
            context.rotate(by: -30 * CGFloat.pi/180)

            let oval4Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -1.5, width: 4, height: 3))
            MightyMetUI.yellowOrange.setFill()
            oval4Path.fill()

            context.restoreGState()


        }
    }

}



private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
