//
//  MightyMetUI.swift
//  MightyMetUI
//
//  Created by Justin Bane on 1/24/17.
//  Copyright Â© 2017 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class MightyMetUI : NSObject {

    //// Cache

    private struct Cache {
        static let gradientColor: UIColor = UIColor(red: 0.676, green: 0.073, blue: 0.073, alpha: 1.000)
        static let gradientColor2: UIColor = UIColor(red: 0.987, green: 1.000, blue: 0.000, alpha: 1.000)
        static let transparent: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 0.156)
        static let lime: UIColor = UIColor(red: 0.000, green: 1.000, blue: 0.108, alpha: 1.000)
        static let electricBlue: UIColor = UIColor(red: 0.000, green: 0.974, blue: 1.000, alpha: 1.000)
        static let redYellow: CGGradient = CGGradient(colorsSpace: nil, colors: [MightyMetUI.gradientColor.cgColor, MightyMetUI.gradientColor2.cgColor] as CFArray, locations: [0.26, 1])!
    }

    //// Colors

    public dynamic class var gradientColor: UIColor { return Cache.gradientColor }
    public dynamic class var gradientColor2: UIColor { return Cache.gradientColor2 }
    public dynamic class var transparent: UIColor { return Cache.transparent }
    public dynamic class var lime: UIColor { return Cache.lime }
    public dynamic class var electricBlue: UIColor { return Cache.electricBlue }

    //// Gradients

    public dynamic class var redYellow: CGGradient { return Cache.redYellow }

    //// Drawing Methods

    public dynamic class func drawMultiSelector(frame: CGRect = CGRect(x: 0, y: 0, width: 345, height: 345), bPMAngle: CGFloat = 0, pitchAngle: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Group
        //// Track
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 173.5, y: frame.minY + 55.3))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 116, y: frame.minY + 70.65), controlPoint1: CGPoint(x: frame.minX + 152.56, y: frame.minY + 55.3), controlPoint2: CGPoint(x: frame.minX + 132.92, y: frame.minY + 60.89))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 58.3, y: frame.minY + 170.5), controlPoint1: CGPoint(x: frame.minX + 81.51, y: frame.minY + 90.56), controlPoint2: CGPoint(x: frame.minX + 58.3, y: frame.minY + 127.82))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 173.5, y: frame.minY + 285.7), controlPoint1: CGPoint(x: frame.minX + 58.3, y: frame.minY + 234.12), controlPoint2: CGPoint(x: frame.minX + 109.88, y: frame.minY + 285.7))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 288.7, y: frame.minY + 170.5), controlPoint1: CGPoint(x: frame.minX + 237.12, y: frame.minY + 285.7), controlPoint2: CGPoint(x: frame.minX + 288.7, y: frame.minY + 234.12))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 173.5, y: frame.minY + 55.3), controlPoint1: CGPoint(x: frame.minX + 288.7, y: frame.minY + 106.88), controlPoint2: CGPoint(x: frame.minX + 237.12, y: frame.minY + 55.3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 333.5, y: frame.minY + 170.5))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 173.5, y: frame.minY + 330.5), controlPoint1: CGPoint(x: frame.minX + 333.5, y: frame.minY + 258.87), controlPoint2: CGPoint(x: frame.minX + 261.87, y: frame.minY + 330.5))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 13.5, y: frame.minY + 170.5), controlPoint1: CGPoint(x: frame.minX + 85.13, y: frame.minY + 330.5), controlPoint2: CGPoint(x: frame.minX + 13.5, y: frame.minY + 258.87))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 77.16, y: frame.minY + 42.74), controlPoint1: CGPoint(x: frame.minX + 13.5, y: frame.minY + 118.31), controlPoint2: CGPoint(x: frame.minX + 38.49, y: frame.minY + 71.95))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 173.5, y: frame.minY + 10.5), controlPoint1: CGPoint(x: frame.minX + 103.96, y: frame.minY + 22.5), controlPoint2: CGPoint(x: frame.minX + 137.33, y: frame.minY + 10.5))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 333.5, y: frame.minY + 170.5), controlPoint1: CGPoint(x: frame.minX + 261.87, y: frame.minY + 10.5), controlPoint2: CGPoint(x: frame.minX + 333.5, y: frame.minY + 82.13))
        bezierPath.close()
        context.saveGState()
        bezierPath.addClip()
        let bezierBounds = bezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(MightyMetUI.redYellow,
            start: CGPoint(x: bezierBounds.midX, y: bezierBounds.minY),
            end: CGPoint(x: bezierBounds.midX, y: bezierBounds.maxY),
            options: [])
        context.restoreGState()




        //// PitchHandle Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 173.49, y: frame.minY + 170.13)
        context.rotate(by: -pitchAngle * CGFloat.pi/180)

        let pitchHandlePath = UIBezierPath(ovalIn: CGRect(x: -22.17, y: -158.4, width: 44.54, height: 42.62))
        MightyMetUI.transparent.setFill()
        pitchHandlePath.fill()
        MightyMetUI.lime.setStroke()
        pitchHandlePath.lineWidth = 3.5
        pitchHandlePath.stroke()

        context.restoreGState()


        //// BPMHandle Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 173.5, y: frame.minY + 170.86)
        context.rotate(by: -bPMAngle * CGFloat.pi/180)

        let bPMHandlePath = UIBezierPath(ovalIn: CGRect(x: -19.72, y: 115.27, width: 44.8, height: 44.79))
        MightyMetUI.transparent.setFill()
        bPMHandlePath.fill()
        MightyMetUI.electricBlue.setStroke()
        bPMHandlePath.lineWidth = 3.5
        bPMHandlePath.stroke()

        context.restoreGState()
    }

    public dynamic class func drawBPMSelector(frame: CGRect = CGRect(x: 0, y: 0, width: 288, height: 301), bPMAngle: CGFloat = 0, bPMText: String = "0") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!


        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.darkGray.withAlphaComponent(0.8)
        shadow.shadowOffset = CGSize(width: 2, height: 2)
        shadow.shadowBlurRadius = 5


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX, y: frame.minY + frame.height - 299, width: 288, height: 288)


        //// Group
        //// Track
        context.saveGState()
        context.translateBy(x: group.minX + 144, y: group.minY + 144)



        //// Bezier Drawing
        context.saveGState()

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: -103.68))
        bezierPath.addCurve(to: CGPoint(x: -51.75, y: -89.86), controlPoint1: CGPoint(x: -18.85, y: -103.68), controlPoint2: CGPoint(x: -36.52, y: -98.65))
        bezierPath.addCurve(to: CGPoint(x: -103.68, y: -0), controlPoint1: CGPoint(x: -82.79, y: -71.95), controlPoint2: CGPoint(x: -103.68, y: -38.41))
        bezierPath.addCurve(to: CGPoint(x: -0, y: 103.68), controlPoint1: CGPoint(x: -103.68, y: 57.26), controlPoint2: CGPoint(x: -57.26, y: 103.68))
        bezierPath.addCurve(to: CGPoint(x: 103.68, y: 0), controlPoint1: CGPoint(x: 57.26, y: 103.68), controlPoint2: CGPoint(x: 103.68, y: 57.26))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -103.68), controlPoint1: CGPoint(x: 103.68, y: -57.26), controlPoint2: CGPoint(x: 57.26, y: -103.68))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 144, y: 0))
        bezierPath.addCurve(to: CGPoint(x: -0, y: 144), controlPoint1: CGPoint(x: 144, y: 79.53), controlPoint2: CGPoint(x: 79.53, y: 144))
        bezierPath.addCurve(to: CGPoint(x: -144, y: -0), controlPoint1: CGPoint(x: -79.53, y: 144), controlPoint2: CGPoint(x: -144, y: 79.53))
        bezierPath.addCurve(to: CGPoint(x: -86.7, y: -114.98), controlPoint1: CGPoint(x: -144, y: -46.97), controlPoint2: CGPoint(x: -121.51, y: -88.7))
        bezierPath.addCurve(to: CGPoint(x: 0, y: -144), controlPoint1: CGPoint(x: -62.59, y: -133.2), controlPoint2: CGPoint(x: -32.55, y: -144))
        bezierPath.addCurve(to: CGPoint(x: 144, y: 0), controlPoint1: CGPoint(x: 79.53, y: -144), controlPoint2: CGPoint(x: 144, y: -79.53))
        bezierPath.close()
        context.saveGState()
        bezierPath.addClip()
        context.drawLinearGradient(MightyMetUI.redYellow, start: CGPoint(x: -0, y: -144), end: CGPoint(x: 0, y: 144), options: [])
        context.restoreGState()

        context.restoreGState()



        context.restoreGState()


        //// Handle
        context.saveGState()
        context.translateBy(x: group.minX + 144, y: group.minY + 144)

        context.setShadow(offset: shadow.shadowOffset, blur: shadow.shadowBlurRadius, color: (shadow.shadowColor as! UIColor).cgColor)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// BPMHandle Drawing
        context.saveGState()
        context.rotate(by: -(bPMAngle + 90) * CGFloat.pi/180)

        let bPMHandlePath = UIBezierPath(ovalIn: CGRect(x: -19.84, y: 105.64, width: 38.72, height: 38.17))
        MightyMetUI.transparent.setFill()
        bPMHandlePath.fill()
        MightyMetUI.electricBlue.setStroke()
        bPMHandlePath.lineWidth = 3.5
        bPMHandlePath.stroke()

        context.restoreGState()


        context.endTransparencyLayer()

        context.restoreGState()


        //// TextLabel
        //// BPM Drawing
        let bPMRect = CGRect(x: group.minX + 53, y: group.minY + 113, width: 110, height: 61)
        let bPMStyle = NSMutableParagraphStyle()
        bPMStyle.alignment = .right
        let bPMFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Roman", size: 60)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: bPMStyle]

        let bPMTextHeight: CGFloat = bPMText.boundingRect(with: CGSize(width: bPMRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: bPMFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: bPMRect)
        bPMText.draw(in: CGRect(x: bPMRect.minX, y: bPMRect.minY + (bPMRect.height - bPMTextHeight) / 2, width: bPMRect.width, height: bPMTextHeight), withAttributes: bPMFontAttributes)
        context.restoreGState()


        //// BPM Label Drawing
        let bPMLabelRect = CGRect(x: group.minX + 168, y: group.minY + 119, width: 43, height: 21)
        let bPMLabelTextContent = "BPM"
        let bPMLabelStyle = NSMutableParagraphStyle()
        bPMLabelStyle.alignment = .left
        let bPMLabelFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Light", size: UIFont.labelFontSize)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: bPMLabelStyle]

        let bPMLabelTextHeight: CGFloat = bPMLabelTextContent.boundingRect(with: CGSize(width: bPMLabelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: bPMLabelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: bPMLabelRect)
        bPMLabelTextContent.draw(in: CGRect(x: bPMLabelRect.minX, y: bPMLabelRect.minY + (bPMLabelRect.height - bPMLabelTextHeight) / 2, width: bPMLabelRect.width, height: bPMLabelTextHeight), withAttributes: bPMLabelFontAttributes)
        context.restoreGState()
    }

    public dynamic class func drawHertzSelector(frame: CGRect = CGRect(x: 10, y: 11, width: 178, height: 178), pitchAngle: CGFloat = 0, hertzText: String = "0") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let gradientColor3 = UIColor(red: 0.462, green: 0.000, blue: 1.000, alpha: 1.000)
        let gradientColor4 = UIColor(red: 1.000, green: 0.000, blue: 0.413, alpha: 1.000)

        //// Gradient Declarations
        let bluePink = CGGradient(colorsSpace: nil, colors: [gradientColor3.cgColor, gradientColor4.cgColor] as CFArray, locations: [0, 1])!

        //// Track
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.minX + 89.5, y: frame.minY + 28))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 62.41, y: frame.minY + 34.39), controlPoint1: CGPoint(x: frame.minX + 79.76, y: frame.minY + 28), controlPoint2: CGPoint(x: frame.minX + 70.56, y: frame.minY + 30.3))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 29, y: frame.minY + 88.5), controlPoint1: CGPoint(x: frame.minX + 42.6, y: frame.minY + 44.32), controlPoint2: CGPoint(x: frame.minX + 29, y: frame.minY + 64.82))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 89.5, y: frame.minY + 149), controlPoint1: CGPoint(x: frame.minX + 29, y: frame.minY + 121.91), controlPoint2: CGPoint(x: frame.minX + 56.09, y: frame.minY + 149))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 150, y: frame.minY + 88.5), controlPoint1: CGPoint(x: frame.minX + 122.91, y: frame.minY + 149), controlPoint2: CGPoint(x: frame.minX + 150, y: frame.minY + 121.91))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 89.5, y: frame.minY + 28), controlPoint1: CGPoint(x: frame.minX + 150, y: frame.minY + 55.09), controlPoint2: CGPoint(x: frame.minX + 122.91, y: frame.minY + 28))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 178, y: frame.minY + 89))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 89, y: frame.minY + 178), controlPoint1: CGPoint(x: frame.minX + 178, y: frame.minY + 138.15), controlPoint2: CGPoint(x: frame.minX + 138.15, y: frame.minY + 178))
        bezierPath.addCurve(to: CGPoint(x: frame.minX, y: frame.minY + 89), controlPoint1: CGPoint(x: frame.minX + 39.85, y: frame.minY + 178), controlPoint2: CGPoint(x: frame.minX, y: frame.minY + 138.15))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 39, y: frame.minY + 15.36), controlPoint1: CGPoint(x: frame.minX, y: frame.minY + 58.38), controlPoint2: CGPoint(x: frame.minX + 15.46, y: frame.minY + 31.38))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 89, y: frame.minY), controlPoint1: CGPoint(x: frame.minX + 53.25, y: frame.minY + 5.67), controlPoint2: CGPoint(x: frame.minX + 70.46, y: frame.minY))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 178, y: frame.minY + 89), controlPoint1: CGPoint(x: frame.minX + 138.15, y: frame.minY), controlPoint2: CGPoint(x: frame.minX + 178, y: frame.minY + 39.85))
        bezierPath.close()
        context.saveGState()
        bezierPath.addClip()
        let bezierBounds = bezierPath.cgPath.boundingBoxOfPath
        context.drawLinearGradient(bluePink,
            start: CGPoint(x: bezierBounds.midX, y: bezierBounds.maxY),
            end: CGPoint(x: bezierBounds.midX, y: bezierBounds.minY),
            options: [])
        context.restoreGState()




        //// Handle
        //// BPMHandle Drawing
        context.saveGState()
        context.translateBy(x: frame.minX + 89, y: frame.minY + 89)
        context.rotate(by: -(pitchAngle + 90) * CGFloat.pi/180)

        let bPMHandlePath = UIBezierPath(ovalIn: CGRect(x: -13.84, y: 61, width: 27.84, height: 27.82))
        MightyMetUI.transparent.setFill()
        bPMHandlePath.fill()
        MightyMetUI.electricBlue.setStroke()
        bPMHandlePath.lineWidth = 3.5
        bPMHandlePath.stroke()

        context.restoreGState()




        //// Labels
        //// Hertz Value Drawing
        let hertzValueRect = CGRect(x: frame.minX + 46, y: frame.minY + 54, width: 87, height: 49)
        let hertzValueStyle = NSMutableParagraphStyle()
        hertzValueStyle.alignment = .center
        let hertzValueFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Roman", size: 40)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: hertzValueStyle]

        let hertzValueTextHeight: CGFloat = hertzText.boundingRect(with: CGSize(width: hertzValueRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: hertzValueFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: hertzValueRect)
        hertzText.draw(in: CGRect(x: hertzValueRect.minX, y: hertzValueRect.minY + (hertzValueRect.height - hertzValueTextHeight) / 2, width: hertzValueRect.width, height: hertzValueTextHeight), withAttributes: hertzValueFontAttributes)
        context.restoreGState()


        //// Herts Label Drawing
        let hertsLabelRect = CGRect(x: frame.minX + 61, y: frame.minY + 103, width: 56, height: 21)
        let hertsLabelTextContent = "Hz"
        let hertsLabelStyle = NSMutableParagraphStyle()
        hertsLabelStyle.alignment = .center
        let hertsLabelFontAttributes = [NSFontAttributeName: UIFont(name: "Avenir-Light", size: 20)!, NSForegroundColorAttributeName: UIColor.black, NSParagraphStyleAttributeName: hertsLabelStyle]

        let hertsLabelTextHeight: CGFloat = hertsLabelTextContent.boundingRect(with: CGSize(width: hertsLabelRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: hertsLabelFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: hertsLabelRect)
        hertsLabelTextContent.draw(in: CGRect(x: hertsLabelRect.minX, y: hertsLabelRect.minY + (hertsLabelRect.height - hertsLabelTextHeight) / 2, width: hertsLabelRect.width, height: hertsLabelTextHeight), withAttributes: hertsLabelFontAttributes)
        context.restoreGState()
    }

}
